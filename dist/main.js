/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_list_popup_menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/list-popup-menu */ \"./src/modules/list-popup-menu.js\");\n/* harmony import */ var _modules_list_item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/list-item */ \"./src/modules/list-item.js\");\n/* harmony import */ var _modules_todo_item_addition_button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/todo-item-addition-button */ \"./src/modules/todo-item-addition-button.js\");\n/* harmony import */ var _modules_todo_item_popup__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/todo-item-popup */ \"./src/modules/todo-item-popup.js\");\n/* harmony import */ var _modules_todo_item__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/todo-item */ \"./src/modules/todo-item.js\");\n\n\n\n\n\n\n\ninit();\n\nfunction init() {\n  //Popup logic\n  _modules_list_popup_menu__WEBPACK_IMPORTED_MODULE_0__.default.openPopupWindow();\n  _modules_list_popup_menu__WEBPACK_IMPORTED_MODULE_0__.default.closePopupWindow();\n  _modules_list_popup_menu__WEBPACK_IMPORTED_MODULE_0__.default.addListItem();\n  //List item logic\n  _modules_list_item__WEBPACK_IMPORTED_MODULE_1__.default.listLogic();\n  //Todo item logic\n  _modules_todo_item_addition_button__WEBPACK_IMPORTED_MODULE_2__.default.todoItemPopupLogic();\n  _modules_todo_item_popup__WEBPACK_IMPORTED_MODULE_3__.default.submitForm();\n  _modules_todo_item__WEBPACK_IMPORTED_MODULE_4__.default.renderTodoItemsToBoardFromDB('all-items-list');\n  \n}\n\n//# sourceURL=webpack://todo-list-app/./src/index.js?");

/***/ }),

/***/ "./src/modules/list-item.js":
/*!**********************************!*\
  !*** ./src/modules/list-item.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _todo_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./todo-item */ \"./src/modules/todo-item.js\");\n\n\n/**\n * A List item is a list whoich holds to do items\n */\nconst listItemLogic = (() => {\n\n    const database = firebase.database();\n    const rootRef = database.ref('lists');\n    let activeList = \"all-items-list\";\n    let currentList = document.getElementById('current-list');\n\n\n    const listLogic = () => {\n        renderExistingLists()\n        createGeneralList();\n    }\n\n    const createGeneralList = () => {\n        let container = document.getElementById('all-items-list')\n        addListToDatabase('All Items', 'all-items-list');\n        allowListItemToBeActive(container);\n        changeActiveListOnClick(container.id);\n    }\n    \n    const changeActiveListOnClick = (listId) => {\n        let list = document.getElementById(listId);\n        list.addEventListener('click', () => {\n            activeList = listId;\n            // Change the todo Items\n            _todo_item__WEBPACK_IMPORTED_MODULE_0__.default.clearTodoItemBoard();\n            _todo_item__WEBPACK_IMPORTED_MODULE_0__.default.renderTodoItemsToBoardFromDB(activeList);\n        })   \n    }\n\n    const changeActiveListOnDelete = () => {\n        activeList = 'all-items-list'\n        // Change the todo Items\n        _todo_item__WEBPACK_IMPORTED_MODULE_0__.default.clearTodoItemBoard();\n        _todo_item__WEBPACK_IMPORTED_MODULE_0__.default.renderTodoItemsToBoardFromDB(activeList);\n        currentList.innerHTML = 'All Items'\n    }\n\n    const getActiveList = () => {\n        return activeList\n    }\n\n    const addListToDatabase = (listName, listId) => {\n        rootRef.child(listId).set({\n            id: listId,\n            list_name: listName,\n         });\n    }\n\n    const deleteListFromDatabase = (listId) => {\n        rootRef.child(listId).remove();\n    }\n\n    const renderExistingLists = () => {\n        rootRef.once('value', snapshot => {\n            snapshot.forEach(element => {\n                if (element.val()['list_name'] != 'All Items') {\n                    let container = createListContainer(element.val()['list_name'], element.key);\n                    appendListContainerToLists(container);\n                    changeActiveListOnClick(element.key);\n                    deleteList(container);\n                }\n            });\n        });\n    }\n\n    const allowListItemToBeActive = (listContainer) => {\n        let listTitleDiv = listContainer.querySelector('.list-title');\n        let listName = listTitleDiv.querySelector('span').innerHTML;\n        let currentListSelectedPreview = document.querySelector('#current-list')\n\n        listContainer.addEventListener('click', () => {\n            currentListSelectedPreview.textContent = listName;\n        })\n    } \n\n    const createListContainer = (listName, listId) => { \n        const listContainer = document.createElement('button');\n        listContainer.className = 'list-item';\n        const listTitle = document.createElement('span')\n        listTitle.innerHTML = listName\n        listContainer.id = listId;\n        let listTitleDiv = document.createElement('div');\n        listTitleDiv.className = 'list-title';\n\n        listTitleDiv.appendChild(listTitle);\n        listContainer.appendChild(listTitleDiv);\n\n        let deleteButtonDiv = document.createElement('div');\n        deleteButtonDiv.className = 'delete-button';\n        listContainer.appendChild(deleteButtonDiv);\n        let aWrapper = document.createElement('a');\n        let deleteIcon = document.createElement('img');\n        deleteIcon.src = '../dist/imgs/close-icon.png';\n        deleteIcon.className = 'delete-icon';\n        deleteIcon.id = 'delete-' + listName + '-list';\n        deleteButtonDiv.appendChild(deleteIcon);\n        deleteIcon.parentNode.insertBefore(aWrapper, deleteIcon);\n        listContainer.appendChild(deleteButtonDiv);\n\n        // Adding the functionality for it to be able to be selected and shown\n        allowListItemToBeActive(listContainer);\n\n        return listContainer\n    }\n\n    const appendListContainerToLists = (listContainer) => {\n        let lists = document.querySelector('.lists');\n        lists.appendChild(listContainer);\n    }\n\n    const deleteList = (listContainer) => {\n        let deleteButton = listContainer.childNodes[1];\n        deleteButton.addEventListener('click', () => {\n            listContainer.remove();\n            deleteListFromDatabase(listContainer.id);\n            currentList.innerHTML = \"All Items\"\n            _todo_item__WEBPACK_IMPORTED_MODULE_0__.default.deleteTodoItemOnListDelete(listContainer.id); // Needd to still change the active list\n            setTimeout(changeActiveListOnDelete, 1500);\n        })    \n    }\n\n    return {\n        changeActiveList : changeActiveListOnClick,\n        getActiveList,\n        listLogic,\n        createGeneralList,\n        createListContainer,\n        appendListContainerToLists,\n        addListToDatabase,\n        deleteList,\n        renderExistingLists,\n    }\n})();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (listItemLogic);\n\n\n\n\n//# sourceURL=webpack://todo-list-app/./src/modules/list-item.js?");

/***/ }),

/***/ "./src/modules/list-popup-menu.js":
/*!****************************************!*\
  !*** ./src/modules/list-popup-menu.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _list_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./list-item */ \"./src/modules/list-item.js\");\n\n\n/**\n * A pop up window for when creating a todo lists\n */\nconst PopupMenu = (() => {\n    \n    \n    //NEED TO ADD GSAP ANIMATIONS\n\n    let popupWindowOpen = false;\n    const listPopup = document.querySelector('.list-popup');\n    const popupInputBox = document.getElementById('list-name');\n    const database = firebase.database();\n    const rootRef = database.ref('/lists/');\n    \n\n    const openPopupWindow = () => {\n        let addButton = document.querySelector('.add-list-item');\n        addButton.addEventListener('click', () => {\n            listPopup.style.display = 'flex';\n        });\n        \n        popupWindowOpen = true;\n    }\n\n    const closePopupWindow = () => {\n        let cancelButton = document.querySelector('.cancel-list');\n        cancelButton.addEventListener('click', () => {\n            listPopup.style.display = 'none';\n        })\n\n        popupWindowOpen = false;\n    }\n\n    const addListItem = () => {\n        let addButton = document.querySelector('.add-list');\n        addButton.addEventListener('click', () => {\n            if (popupInputBox.value.length > 0) {  \n                const autoId = rootRef.push().key; // Creates distinct id's   \n                _list_item__WEBPACK_IMPORTED_MODULE_0__.default.addListToDatabase(popupInputBox.value, autoId);\n                let listContainer = _list_item__WEBPACK_IMPORTED_MODULE_0__.default.createListContainer(popupInputBox.value, autoId);\n                _list_item__WEBPACK_IMPORTED_MODULE_0__.default.appendListContainerToLists(listContainer);\n                _list_item__WEBPACK_IMPORTED_MODULE_0__.default.changeActiveList(autoId) // Allow the user to select a list\n                _list_item__WEBPACK_IMPORTED_MODULE_0__.default.deleteList(listContainer);\n                popupInputBox.value = null;\n            }\n    \n            else if (popupInputBox.value.length < 1) {\n                popupInputBox.id = 'list-name-invalid';\n                setInterval(() => {popupInputBox.id = 'list-name'}, 800); // change class name back     \n            }\n        });  \n        \n    }\n\n    return {\n        openPopupWindow,\n        closePopupWindow,\n        addListItem,\n    }\n\n})();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (PopupMenu);\n\n\n\n//# sourceURL=webpack://todo-list-app/./src/modules/list-popup-menu.js?");

/***/ }),

/***/ "./src/modules/todo-item-addition-button.js":
/*!**************************************************!*\
  !*** ./src/modules/todo-item-addition-button.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * The logic for the add todo item button at the top\n */\n\nconst todoItemAddButton = (() => {\n\n    const popupClose = document.querySelector('.close-form');\n    const modalPopupMenu = document.querySelector('.modal-todo-item-form');\n    const addButton = document.querySelector('.add-todo-item');\n\n    const todoItemPopupLogic = () => {\n        addButton.addEventListener('click', () => {\n            modalPopupMenu.style.display = 'block';\n        });\n\n        popupClose.addEventListener('click', () => {\n            modalPopupMenu.style.display = 'none';\n        });\n\n        window.addEventListener('click', (event) => {\n            if (event.target == modalPopupMenu) {\n                modalPopupMenu.style.display = 'none';\n            }\n        })\n    }\n\n    return {\n        todoItemPopupLogic,\n    }\n})();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (todoItemAddButton);\n\n\n//# sourceURL=webpack://todo-list-app/./src/modules/todo-item-addition-button.js?");

/***/ }),

/***/ "./src/modules/todo-item-popup.js":
/*!****************************************!*\
  !*** ./src/modules/todo-item-popup.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _todo_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./todo-item */ \"./src/modules/todo-item.js\");\n/* harmony import */ var _list_item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./list-item */ \"./src/modules/list-item.js\");\n \n\n\n/**\n * A module to handle the todo item modular popups\n */\nconst submitTodoItem = (() => {\n    const database = firebase.database();\n    const rootRef = database.ref('todo-items');\n    const formWindow = document.querySelector('.modal-todo-item-form');\n    const submitFormButton = document.querySelector('.submit-todo-item');\n    const itemDescription = document.querySelector('#item-desc');\n    const dueDate = document.querySelector('#todo-due');\n    const priority = document.getElementsByName('priority');\n    const editPriority = document.getElementsByName('expanded-priority');\n    \n    function checkedPriorityAddition() {\n        var value = '';\n        priority.forEach(element => {\n            if (element.checked) {\n                let id = element.id + '-label';\n                let priorityValue = document.getElementById(id).innerHTML;\n                value = priorityValue;\n            }\n        });\n        return value;\n    }\n    \n    //Bad code practice, but it works for the situation I made a mess of\n    function checkedPriorityEdit() {\n        var value = '';\n        editPriority.forEach(element => {\n            if (element.checked) {\n                let id = element.id + '-label';\n                let priorityValue = document.getElementById(id).innerHTML;\n                value = priorityValue;\n            }\n        });\n        return value;\n    }\n\n    const submitForm = () => {\n        submitFormButton.addEventListener('click', () => {\n            const autoId = rootRef.push().key;\n            addTodoItemsToDb(autoId, itemDescription.value, dueDate.value, checkedPriorityAddition(), _list_item__WEBPACK_IMPORTED_MODULE_1__.default.getActiveList());\n            _todo_item__WEBPACK_IMPORTED_MODULE_0__.default.createAndAddToDo(itemDescription.value, dueDate.value, checkedPriorityAddition(), autoId);\n            \n            // Reset the form\n            itemDescription.value = '';\n            dueDate.value = '';\n            priority.forEach(element => {\n                if (element.checked) {\n                    element.checked = false;\n                }\n            })\n            formWindow.style.display = 'none';\n        })\n    }\n\n    const submitEdit = (itemId) => {\n        const popup = document.querySelector('.expanded-todo-item');\n        const submitEditButton = document.querySelector('.submit-todo-item-edit');\n        submitEditButton.addEventListener('click', () => {\n            let todoItemSelected = document.getElementById(itemId);\n\n            // form items\n            let formDescription = document.getElementById('expanded-item-desc');\n            let formNewDate = document.getElementById('expanded-todo-due');\n            let formNewPriority = checkedPriorityEdit();\n            \n\n            // todo-item items\n            let descriptionValue = document.querySelector('#description-container p');\n            let dueDateValue = document.querySelector('#date-container p');\n            let newPriorityValue = document.querySelector('#priority-container p');\n\n            descriptionValue.textContent = formDescription.value;\n            dueDateValue.textContent = _todo_item__WEBPACK_IMPORTED_MODULE_0__.default.formatDateCorrectly(formNewDate.value);\n            newPriorityValue.textContent = formNewPriority;\n\n            popup.style.display = 'none';\n            \n            \n            // Change the values in db\n            // Do mobile view, then done\n\n        })\n    }\n    \n    const addTodoItemsToDb = (itemId, todoDescription, todoDueDate, todoItemPriority, parentList) => {\n        rootRef.child(itemId).set({\n            id: itemId,\n            item_description: todoDescription,\n            due_date: todoDueDate,\n            priority: todoItemPriority,\n            parent_list: parentList,\n        });\n    }\n\n    return {\n        submitForm,\n        submitEdit,\n        addTodoItemsToDb,\n    }\n})();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (submitTodoItem);\n\n\n//# sourceURL=webpack://todo-list-app/./src/modules/todo-item-popup.js?");

/***/ }),

/***/ "./src/modules/todo-item.js":
/*!**********************************!*\
  !*** ./src/modules/todo-item.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _todo_item_popup__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./todo-item-popup */ \"./src/modules/todo-item-popup.js\");\n\n\n/**\n * This is a todo item within a particular list\n */\n\nconst todoItem = (() => {\n\n    const database = firebase.database();\n    const rootRefTodoItems = database.ref('todo-items');\n    const colors = {\n        'Low': 'green',\n        'Medium': 'orange',\n        'High': 'red',\n    }\n\n    const TodoItemObjectLogic = () => {\n        let container = createTodoItemContainer();\n        addTodoItemToBoard(container);        \n    }\n\n    const createAndAddToDo = (description, dueDate, priority, autoId) => {\n        const parentContainer = createTodoItemContainer();\n        parentContainer.id = autoId;\n\n        const itemDescriptionContainer = document.createElement('span');\n        itemDescriptionContainer.id = 'description-container';\n        const descriptionValue = document.createElement('p');\n        descriptionValue.textContent = description;\n        itemDescriptionContainer.appendChild(descriptionValue);\n\n        const dueDateContainer = document.createElement('span');\n        dueDateContainer.id = 'date-container';\n        const dueDateValue = document.createElement('p');\n        dueDateValue.textContent = formatDateCorrectly(dueDate);\n        dueDateContainer.appendChild(dueDateValue);\n\n        const priorityContainer = document.createElement('span');\n        priorityContainer.id = 'priority-container';\n        const priorityValue = document.createElement('p');\n        priorityValue.textContent = priority;\n        priorityValue.style.color = colors[priority];\n        priorityContainer.appendChild(priorityValue);\n\n        const deleteTodoItem = document.createElement('div');\n        deleteTodoItem.className = 'delete-todo-item';\n        let trashCan = document.createElement('img');\n        trashCan.className = 'delete-todo-item';\n        trashCan.src = '../dist/imgs/trash-can.svg'; \n        deleteTodoItem.appendChild(trashCan);\n        \n        parentContainer.appendChild(itemDescriptionContainer);\n        parentContainer.appendChild(dueDateContainer);\n        parentContainer.appendChild(priorityContainer);\n        parentContainer.appendChild(deleteTodoItem);\n\n        allowModalPopup(parentContainer, description, dueDate, priority); // Modal popup functionality\n        addTodoItemToBoard(parentContainer);\n        completedTodoItem(autoId);\n        \n    }\n\n    const createTodoItemContainer = () => {\n        const container = document.createElement('div');\n        container.setAttribute('class', 'todo-item');\n\n        const radioButton = document.createElement('input');\n        radioButton.className = 'check-box';\n        radioButton.type = 'checkbox';\n\n        const spanCheckbox = document.createElement('span');\n        spanCheckbox.className = 'checkmark';\n\n        container.appendChild(radioButton);\n        container.appendChild(spanCheckbox);\n\n        return container;\n    }\n\n    const addTodoItemToBoard = (todoItemContainer) => {\n        let todoItemBoard = document.querySelector('.todo-items-board');\n        todoItemBoard.appendChild(todoItemContainer);\n        allowDeleteTodoItem(todoItemContainer);\n    }\n\n    const allowDeleteTodoItem = (item) => {\n        let deleteButton = item.querySelector('.delete-todo-item');\n        let itemId = item.id;\n        deleteButton.addEventListener('click', e => {\n            e.cancelBubble = true;\n            item.remove();\n            deleteItemFromDatabase(itemId);\n        })            \n    }\n\n    const deleteItemFromDatabase = (itemId) => { \n        rootRefTodoItems.once('value', snapshot => {\n            snapshot.forEach(element => {\n                if (element.val()['id'] == itemId) {\n                    rootRefTodoItems.child(element.val()['id']).remove();\n                }\n            })\n        })\n    }\n\n    const formatDateCorrectly = (date) => {\n        if (date.includes('-')) {\n            let seperatedDate = date.split('-');\n            let newDate = seperatedDate[2] + '/' + seperatedDate[1] + '/' + seperatedDate[0];\n            return newDate;\n        }\n        return;\n    }\n    \n\n    const deleteTodoItemOnListDelete = (listId) => { \n        rootRefTodoItems.once('value', snapshot => {\n            snapshot.forEach(element => {\n                if (element.val()['parent_list'] == listId) {\n                    let itemId = element.val()['id'];\n                    let todoItem = document.getElementById(itemId);\n                    todoItem.remove()\n                    deleteItemFromDatabase(itemId);\n                } \n            })\n        })\n    }\n\n    const allowModalPopup = (container, description, dueDate, priority) => { // need to do\n        const popup = document.querySelector('.expanded-todo-item');\n        const itemDescription = document.getElementById('expanded-item-desc');\n        const dueDateInput = document.getElementById('expanded-todo-due');\n        const closeForm = document.getElementById('close-expanded-todo-form');\n        var priorityValue = priority.toLowerCase() + '-priority-expanded';\n        const priorityButtons = document.getElementsByName('expanded-priority');\n    \n        container.addEventListener('click', () => {\n            popup.style.display = 'block';\n            itemDescription.value = description;\n            dueDateInput.value = dueDate;\n            priorityButtons.forEach(e => {\n                if (e.id === priorityValue) {\n                    e.checked = true;\n                }\n            })\n        });\n\n        closeForm.addEventListener('click', () => {\n            popup.style.display = 'none';\n        })\n\n        _todo_item_popup__WEBPACK_IMPORTED_MODULE_0__.default.submitEdit(container.id)\n    }\n\n    const completedTodoItem = (containerId) => { \n        let todoItemContainer = document.getElementById(containerId);\n        const checkBox = todoItemContainer.querySelector('.check-box');\n        checkBox.addEventListener('click', e => {\n            if (!todoItemContainer.className.includes('-completed')) {\n                e.cancelBubble = true;\n                todoItemContainer.style.setProperty(\"text-decoration\", \"line-through\");\n                todoItemContainer.className += ' todo-item-completed';\n            } else if (todoItemContainer.className.includes('-completed')) {\n                e.cancelBubble = true;\n                todoItemContainer.style.setProperty(\"text-decoration\", \"none\");\n                todoItemContainer.setAttribute('class', 'todo-item'); \n            }\n            \n        });\n    }\n\n\n    const clearTodoItemBoard = () => {\n        let todoItems = Array.from(document.getElementsByClassName('todo-item'));\n        todoItems.forEach(element => {\n            element.remove();\n        });\n    }\n\n    const renderTodoItemsToBoardFromDB = (activeList) => {\n        rootRefTodoItems.once('value', snapshot => {\n            snapshot.forEach(element => {\n                if (activeList == 'all-items-list') {\n                    createAndAddToDo(element.val()['item_description'], element.val()['due_date'], element.val()['priority'], element.val()['id']);\n                    return;\n                }\n                if (element.val()['parent_list'] == activeList) {\n                    createAndAddToDo(element.val()['item_description'], element.val()['due_date'], element.val()['priority'], element.val()['id']);\n                }\n            });\n        });\n    }\n\n    return {\n        createAndAddToDo,\n        TodoItemObjectLogic,\n        clearTodoItemBoard,\n        formatDateCorrectly,\n        deleteTodoItemOnListDelete,\n        renderTodoItemsToBoardFromDB,\n    }\n\n})();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (todoItem);\n\n//# sourceURL=webpack://todo-list-app/./src/modules/todo-item.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;